# Discussion question, Week 2
## The first question deals with how we decide upon our digital priorities: Unsworth says that while we can create all the software we want, but without it being “developed and tested in the context of real scholarly use” it can be useless.  Furthermore, he warns against “customization, because purpose-built or project-centered software is unlikely to provide broad support for functional primitives.”  This claim makes sense, yet how is it best put to action in the ‘real-world’?  For example, does every scholar working on Blake manuscripts (which Unsworth makes mention of in his talk on Inote) need to have a process by which they ‘try out’ a specific digital archive, so we can have as large a sample set of scholars as we can, trying out certain software?  This got me to thinking about the nature of the digital humanities.  It seems we often make software, or rework an old online repository, to fulfill a specific need—or to advance a certain university’s (or professor’s) specific project.  But what happens to other material that won’t be touched, or that doesn’t garner the digital attention that other material gets?  I understand that we must start somewhere—and that somewhere is better than nowhere—but how do we determine our priorities in digitizing and creating new software?
*
### To quote O’Donnell, “Technology ages faster than information.”  O’Donnell gives a fairly balanced perspective on the positives and negatives of digital scholarship in the medieval realm.  One of his most interesting examples, the Electronic Domesday Book—initiated by the BBC—turned out to be a catastrophic failure.  It was not only too expensive for its target audience and was also designed for certain computers only, both elements that condemned it to its own obsolescence.  This is a rather large question to tackle, but how can we work to make sure we don’t produce ‘failures’ of this sort, schemes where vast quantities of time, energy, and money seem to be wasted in the end?  O’Donnell’s overall impression of Wikipedia seems quite positive, illumining his opinion that collaboration is the key to solving many of these problems.  Do repositories and databases, then, need to have a way in which users can collaborate and edit—like Wikipedia?  What do we sacrifice with regards to accuracy and legitimacy when doing so?  Is it worth it?
